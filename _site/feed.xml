<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-IN"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-IN" /><updated>2023-08-16T02:54:13+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">My Blog</title><subtitle>Blog about documenting stuff that i learn/learnt.&lt;a href=&quot;https://github.com/creator54&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;@github&lt;/a&gt;.</subtitle><author><name>Saroj Mahato</name><email>mail@creator54.dev</email></author><entry><title type="html">Running a MySQL Server in a Docker Container</title><link href="http://localhost:4000/mysql/" rel="alternate" type="text/html" title="Running a MySQL Server in a Docker Container" /><published>2023-08-16T00:00:00+05:30</published><updated>2023-08-16T00:00:00+05:30</updated><id>http://localhost:4000/mysql</id><content type="html" xml:base="http://localhost:4000/mysql/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Docker is a popular containerization platform that allows you to easily run and manage applications in isolated environments called containers. This guide will walk you through running a MySQL server in a Docker container using the <code class="language-plaintext highlighter-rouge">docker run</code> command, as well as how to connect to the server and some essential commands.</p>

<h2 id="running-a-mysql-server-in-a-docker-container">Running a MySQL Server in a Docker Container</h2>

<p>To create and run a MySQL server in a Docker container, you can use the following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--name</span><span class="o">=</span>mysql <span class="nt">-e</span> <span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>passwd mysql
</code></pre></div></div>

<p>Let’s break down the command:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--name=mysql</code>: This option sets the name of the container to “mysql”. You can choose any name you prefer.</li>
  <li><code class="language-plaintext highlighter-rouge">-e MYSQL_ROOT_PASSWORD=passwd</code>: This option sets the root password for the MySQL server inside the container to “passwd”. Feel free to replace “passwd” with your desired password.</li>
  <li><code class="language-plaintext highlighter-rouge">mysql</code>: This is the name of the Docker image for the MySQL server.</li>
</ul>

<p>This command will pull the MySQL image from the Docker Hub if it is not already available on your system, and then start a container running the MySQL server.</p>

<h2 id="waiting-for-the-server-to-be-ready">Waiting for the Server to be Ready</h2>

<p>It is important to wait for the MySQL server to be fully initialized and ready before trying to make any connections to it. One way to do this is by using a shell script to check if the server is ready and waiting for connections:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="k">until </span>docker <span class="nb">exec </span>mysql mysqladmin ping <span class="nt">--silent</span><span class="p">;</span> <span class="k">do
    </span><span class="nb">sleep </span>1
<span class="k">done

</span><span class="nb">echo</span> <span class="s2">"MySQL Server has started. Please wait for few more minutes for it to avoid:"</span>
<span class="nb">echo</span> <span class="s2">"ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)"</span>
<span class="nb">echo

sleep </span>60

<span class="nb">echo</span> <span class="s2">"MySQL server is ready!"</span>
</code></pre></div></div>

<p>If you encounter the error <code class="language-plaintext highlighter-rouge">ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2)</code>. Please wait for few minutes and check again.
You can save this script to a file, for example, <code class="language-plaintext highlighter-rouge">wait-for-mysql.sh</code>, and then run it to wait for the MySQL server to be ready.</p>

<h2 id="connecting-to-the-mysql-server">Connecting to the MySQL Server</h2>

<p>Once the MySQL server is ready, you can connect to it using the following command:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">exec</span> <span class="nt">-it</span> mysql mysql <span class="nt">-u</span> root <span class="nt">-p</span>
</code></pre></div></div>
<p>Enter the password set during <code class="language-plaintext highlighter-rouge">docker run</code> when asked. This command will open an interactive session inside the running MySQL container, allowing you to execute SQL commands and manage the MySQL server.</p>

<h2 id="essential-mysql-commands">Essential MySQL Commands</h2>

<p>Here are some essential MySQL commands that you can use to interact with the MySQL server:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">SHOW DATABASES;</code>: Lists all the databases on the server.</li>
  <li><code class="language-plaintext highlighter-rouge">USE database_name;</code>: Selects the specified database for use.</li>
  <li><code class="language-plaintext highlighter-rouge">SHOW TABLES;</code>: Lists all the tables in the current database.</li>
  <li><code class="language-plaintext highlighter-rouge">CREATE DATABASE database_name;</code>: Creates a new database with the specified name.</li>
  <li><code class="language-plaintext highlighter-rouge">CREATE TABLE table_name (...);</code>: Creates a new table with the specified name and columns.</li>
  <li><code class="language-plaintext highlighter-rouge">INSERT INTO table_name VALUES (...);</code>: Inserts a new row into the specified table.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>In this guide, you learned how to create and run a MySQL server in a Docker container using the <code class="language-plaintext highlighter-rouge">docker run</code> command. You also learned how to wait for the server to be ready before connecting to it, as well as some essential commands for managing the MySQL server.</p>

<p>Running a MySQL server in a Docker container provides a portable and isolated environment for developing and testing applications that rely on a MySQL database. It also allows you to easily replicate the server configurations across different environments, making it simpler to deploy and scale your applications.</p>

<p>Happy MySQL Database learning !</p>]]></content><author><name>Saroj Mahato</name><email>mail@creator54.dev</email></author><category term="docker" /><category term="mysql" /><category term="containers" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Kubernetes Beginners Guide</title><link href="http://localhost:4000/kubernetes-basics/" rel="alternate" type="text/html" title="Kubernetes Beginners Guide" /><published>2023-08-10T00:00:00+05:30</published><updated>2023-08-10T00:00:00+05:30</updated><id>http://localhost:4000/kubernetes-basics</id><content type="html" xml:base="http://localhost:4000/kubernetes-basics/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Kubernetes, often abbreviated as K8s, has transformed the world of container orchestration, making it easier to manage and deploy containerized applications across diverse environments. This guide is a comprehensive introduction to Kubernetes, covering its core concepts, benefits, and essential commands for engineers.</p>

<h2 id="the-kubernetes-challenge">The Kubernetes Challenge</h2>

<p>Before Kubernetes, managing containerized applications posed significant challenges:</p>

<ol>
  <li><strong>Complexity</strong>: Traditional script-based approaches for managing containers were complex and error-prone.</li>
  <li><strong>Service Availability</strong>: Ensuring continuous availability during updates or hardware failures was a struggle.</li>
  <li><strong>Scalability</strong>: Traditional systems couldn’t efficiently scale to meet the demands of modern applications.</li>
</ol>

<h2 id="kubernetes-a-solution-overview">Kubernetes: A Solution Overview</h2>

<p>Kubernetes addresses these challenges in the following ways:</p>

<ol>
  <li><strong>Declarative Configuration</strong>: Kubernetes uses declarative configuration to specify the desired state of applications, reducing the need for complex scripts.</li>
  <li><strong>High Availability</strong>: Kubernetes automatically distributes workloads across nodes, ensuring high availability and minimizing downtime.</li>
  <li><strong>Efficient Scalability</strong>: Kubernetes dynamically scales applications based on resource utilization, enabling seamless handling of varying workloads.</li>
  <li><strong>Zero Downtime Updates</strong>: Kubernetes performs updates with zero downtime through rolling updates, guaranteeing uninterrupted service availability.</li>
  <li><strong>Resource Management</strong>: Kubernetes allows fine-grained control over resource allocation, preventing resource-hungry containers from affecting others.</li>
  <li><strong>Isolation and Multi-Tenancy</strong>: Kubernetes uses namespaces for isolation, allowing different teams or applications to coexist in the same cluster.</li>
</ol>

<h2 id="core-concepts">Core Concepts</h2>

<p>Kubernetes introduces essential concepts:</p>

<ol>
  <li><strong>Pods</strong>: Pods are the fundamental units, hosting one or more containers.</li>
  <li><strong>Deployments</strong>: Deployments define pod blueprints, handle zero-downtime updates, and ensure application consistency.</li>
  <li><strong>StatefulSets</strong>: Ideal for managing stateful applications like databases, ensuring data consistency.</li>
  <li><strong>Services</strong>: Services provide a stable communication mechanism for pods, including load balancing.</li>
  <li><strong>Ingress</strong>: Ingress routes external traffic to services, a crucial component for web applications.</li>
  <li><strong>ConfigMap and Secrets</strong>: ConfigMap stores configuration settings, while Secrets securely manage sensitive data.</li>
  <li><strong>Volumes</strong>: Volumes offer persistent storage for containers, facilitating data persistence.</li>
</ol>

<h2 id="essential-kubectl-commands">Essential kubectl Commands</h2>

<p>As a Kubernetes engineer, you’ll use these fundamental <code class="language-plaintext highlighter-rouge">kubectl</code> commands:</p>

<ol>
  <li><strong>List Resources</strong>: <code class="language-plaintext highlighter-rouge">kubectl get [resource-type]</code></li>
  <li><strong>Create a Resource</strong>: <code class="language-plaintext highlighter-rouge">kubectl create [resource-type] [resource-name] [flags]</code></li>
  <li><strong>Describe a Resource</strong>: <code class="language-plaintext highlighter-rouge">kubectl describe [resource-type] [resource-name]</code></li>
  <li><strong>Delete a Resource</strong>: <code class="language-plaintext highlighter-rouge">kubectl delete [resource-type] [resource-name]</code></li>
  <li><strong>Apply Configuration from a File</strong>: <code class="language-plaintext highlighter-rouge">kubectl apply -f [file.yaml]</code></li>
  <li><strong>Scaling</strong>: <code class="language-plaintext highlighter-rouge">kubectl scale [resource-type] [resource-name] --replicas=[count]</code></li>
  <li><strong>Port Forwarding</strong>: <code class="language-plaintext highlighter-rouge">kubectl port-forward [pod-name] [local-port]:[pod-port]</code></li>
  <li><strong>Logs</strong>: <code class="language-plaintext highlighter-rouge">kubectl logs [pod-name]</code></li>
  <li><strong>Namespace Management</strong>: <code class="language-plaintext highlighter-rouge">kubectl create namespace [namespace-name]</code></li>
  <li><strong>Context and Configuration</strong>: <code class="language-plaintext highlighter-rouge">kubectl config use-context [context-name]</code></li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>With Kubernetes, we have a powerful tool for managing containerized applications, ensuring high availability, scalability, and efficient debugging.</p>

<h2 id="read-more">Read More</h2>

<p>Refer Kubernetes <a href="https://kubernetes.io/docs/">documentation</a> for comprehensive information on each command and their various options.</p>

<p>Happy Kuberneting! 🚀</p>]]></content><author><name>Saroj Mahato</name><email>mail@creator54.dev</email></author><category term="kubernetes" /><category term="container-orchestration" /><category term="devops" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Keeping a Docker Container Running for Debugging</title><link href="http://localhost:4000/docker-debugging/" rel="alternate" type="text/html" title="Keeping a Docker Container Running for Debugging" /><published>2023-07-15T00:00:00+05:30</published><updated>2023-07-15T00:00:00+05:30</updated><id>http://localhost:4000/docker-debugging</id><content type="html" xml:base="http://localhost:4000/docker-debugging/"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>When working with Docker containers, it can be helpful to keep a container running in the background while performing debugging or troubleshooting tasks. This guide will show you how to run a Docker container and keep it running using a specific command.</p>

<h2 id="the-command">The Command</h2>

<p>The following Docker command allows you to start a container and keep it running:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">-d</span> <span class="nt">--name</span> my_container &lt;image_name&gt; /usr/bin/env bash <span class="nt">-c</span> <span class="s2">"yes"</span>
</code></pre></div></div>

<p>Let’s break down the command:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">-it</code>: This option enables an interactive terminal session within the container.</li>
  <li><code class="language-plaintext highlighter-rouge">-d</code>: This option runs the container in the background (detached mode).</li>
  <li><code class="language-plaintext highlighter-rouge">--name my_container</code>: This option sets a custom name for the container, in this case, “my_container”. You can choose any name you prefer.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;image_name&gt;</code>: Replace this with the name of the Docker image you want to use for the container.</li>
  <li><code class="language-plaintext highlighter-rouge">/usr/bin/env bash -c "yes"</code>: This command runs the “yes” command continuously inside the container. The “yes” command outputs “y” (yes) until interrupted. Letting us keep the container alive.</li>
</ul>

<p>Using the Container</p>

<p>Once you run the command, the container will be started and kept running in the background. You can then perform various debugging tasks or check the container’s behavior as needed.</p>

<p>To access the container’s shell and interact with it, you can use the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker exec -it my_container bash
</code></pre></div></div>

<p>This will open an interactive shell session inside the running container, allowing you to execute commands and perform debugging tasks.
Conclusion</p>

<p>By using the provided Docker command, you can easily start a container and keep it running for debugging purposes. This allows you to investigate the container’s behavior, check logs, and execute commands inside the container while it remains active in the background.</p>

<p>Remember to replace <image_name> with the actual Docker image you want to use for your container. With this approach, you have more flexibility and control over the container, enabling efficient debugging and troubleshooting.</image_name></p>

<p>Happy debugging 😀 !</p>]]></content><author><name>Saroj Mahato</name><email>mail@creator54.dev</email></author><category term="docker" /><category term="debugging" /><category term="containers" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">NixOS Server Setup</title><link href="http://localhost:4000/nix-server-setup/" rel="alternate" type="text/html" title="NixOS Server Setup" /><published>2022-01-30T18:09:24+05:30</published><updated>2022-01-30T18:09:24+05:30</updated><id>http://localhost:4000/nix-server-setup</id><content type="html" xml:base="http://localhost:4000/nix-server-setup/"><![CDATA[<h1 id="nix-server-setup--a-simple-script-to-automate-this">NIX SERVER-SETUP : <a href="https://github.com/creator54/nix-server-setup">a simple script to automate this</a></h1>
<h1 id="currently-none-provide-with-nix-images-thus-have-to-use-conversion-">currently none provide with nix-images thus have to use conversion !</h1>

<h2 id="ssh-to-server-and-run">SSH to server and run</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo -s curl https://raw.githubusercontent.com/elitak/nixos-infect/master/nixos-infect | NIX_CHANNEL=nixos-21.11 bash -x
</code></pre></div></div>

<h2 id="you-will-be-logged-out-after-os-is-converted-to-nixos--login-again-and-proceed-">You will be logged out after OS is converted to NixOS ! Login again and proceed .</h2>

<h2 id="add-to-etcnixosconfigurationnix-for-default-shell">add to /etc/nixos/configuration.nix for default shell</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>users.users.root.shell = pkgs.fish;
</code></pre></div></div>

<h2 id="copy-local-sshid_ed25519pub-to-server-or-create-a-new-one-as-below">copy local ~/.ssh/id_ed25519.pub to server or create a new one as below</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen -t ed25519 -C 'hi.creator54@gmail.com'
ssh-add ~/.ssh/id_ed25519
cat ~/.ssh/id_ed25519.pub #paste this in github
</code></pre></div></div>
<h2 id="fetching-configs">Fetching configs</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nix-env -iA nixos.home-manager
nix-shell -p git --run "git clone git@github.com:creator54/nixos-cfg --recursive -b server ~/.config/nixpkgs"
home-manager switch
</code></pre></div></div>
<p>Setup Complete !!</p>

<h2 id="note--do-not-forget-to-set-root-password-">Note:  do not forget to set root password !</h2>]]></content><author><name>Saroj Mahato</name><email>mail@creator54.dev</email></author><category term="nix" /><category term="nixos" /><summary type="html"><![CDATA[Setting up nixos on Cloud]]></summary></entry><entry><title type="html">ADB Fastboot on NixOS</title><link href="http://localhost:4000/adb-fastboot-on-nixos/" rel="alternate" type="text/html" title="ADB Fastboot on NixOS" /><published>2021-08-24T00:00:00+05:30</published><updated>2021-08-24T00:00:00+05:30</updated><id>http://localhost:4000/adb-fastboot-on-nixos</id><content type="html" xml:base="http://localhost:4000/adb-fastboot-on-nixos/"><![CDATA[<h2 id="this-guide-covers-how-to-get-get-adb-and-fastboot-working-on-nixos">This guide covers how to get get adb and fastboot working on NixOS</h2>

<p>First you need to get the android tools package. NixOS stable currently doesn’t
include android-tools so get it via nixpkgs.</p>

<blockquote>
  <p>nix-env -iA nixpkgs.android-tools</p>
</blockquote>

<p>This will install all base packages like <code class="language-plaintext highlighter-rouge">fastboot</code> and <code class="language-plaintext highlighter-rouge">adb</code>. For fastboot you
can simply start using the <code class="language-plaintext highlighter-rouge">fastboot</code> cmd after plugging the device on fastboot
mode. But for adb you need to start the server with root permissions which can
be achieved via a simple 	<code class="language-plaintext highlighter-rouge">sudo adb devices</code> or <code class="language-plaintext highlighter-rouge">sudo adb shell</code> should work
with and basic <code class="language-plaintext highlighter-rouge">adb</code> cmd. This is a one time requirement, no need to type sudo
again and again. Also remember to connect the device with <code class="language-plaintext highlighter-rouge">usb debugging</code> on
after the above cmd else adb fails to recognise the device and you will need to
unplug and replug again.</p>

<p>Now you are ready to use adb cmds as per your liking .Eg:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">adb pull /sdcard/test.mp4</code></li>
  <li><code class="language-plaintext highlighter-rouge">adb shell screenrecord --verbose /sdcard/test.mp4</code></li>
  <li><code class="language-plaintext highlighter-rouge">adb shell am start -a android.intent.action.VIEW -d $url</code></li>
</ul>

<p>Enjoy !!</p>]]></content><author><name>Saroj Mahato</name><email>mail@creator54.dev</email></author><category term="adb" /><category term="fastboot" /><category term="nix" /><category term="nixos" /><summary type="html"><![CDATA[This guide covers how to get get adb and fastboot working on NixOS]]></summary></entry><entry><title type="html">Git What,Why and How ?</title><link href="http://localhost:4000/git-guide/" rel="alternate" type="text/html" title="Git What,Why and How ?" /><published>2020-12-24T12:24:24+05:30</published><updated>2020-12-24T12:24:24+05:30</updated><id>http://localhost:4000/git-guide</id><content type="html" xml:base="http://localhost:4000/git-guide/"><![CDATA[<h4 id="-what-is-git-"><img src="https://git-scm.com/images/logos/downloads/Git-Icon-1788C.png" alt="git" width="30" /> What is git ?</h4>

<p>Git is a open source distributed Version Control System(VCS) originally developed in 2005 by <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> the creator of the linux kernel and is still being actively mantained.</p>
<hr />

<h4 id="why-use-it-">Why use it ?</h4>

<p>While working on a project git tracks the changes you make to files, thus keeping record of what has been done, so you can easily revert your project to some specific point or change should you ever need to. Git also makes collaboration easier, allowing changes by multiple people to all be merged into one source and maintaining projects efficiently. It does so by storing your changes in commits.</p>
<hr />

<h4 id="how-to-use-git-">How to use git ?</h4>

<p>First you need to install git. For windows visit the link and download and install it, others just open the terminal and type the commands.</p>

<p>Windows 			: <a href="https://git-scm.com/download/win">https://git-scm/download/win</a>
<br />MacOs 			: <code class="language-plaintext highlighter-rouge">$ brew install git</code>
<br />Debian/Ubuntu  	: <code class="language-plaintext highlighter-rouge">$ sudo apt install git</code>
<br />Arch based 		: <code class="language-plaintext highlighter-rouge">$ sudo pacman -S git</code>
<br />NixOS 			: <code class="language-plaintext highlighter-rouge">$ nix-env -iA nixos.git</code></p>

<ul>
  <li>Configure git
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global user.name "username" #set git username globally
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global user.email &lt;usermail@example.com&gt; #set git usermail
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global core.editor &lt;editor&gt; #set preferred editor for git
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --list 	#check git config
</code></pre></div>    </div>
    <p><br /></p>
  </li>
  <li>General commands
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git init 		#initialize the repo.
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add . 		#stage all changes to be commited
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit 		#commit changes with a commit msg + summary
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -m "msg" 	#commit changes with a commit msg.
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit --amend 	#amend last commit locally.
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git remote add origin &lt;url.git&gt;   #add url where to host the repo
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git merge &lt;b1&gt;    #merge changes from 'b1' branch to current branch
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git mergetool 	#handy tool for solving merge conflicts
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git cherry-pick &lt;commit-id&gt; 	#add commit with given id from a remote(added to the project) to current branch
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git pull 	#pulls latest changes from default branch(branch/remote can be specified)
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git push 	#push latest changes to cloud host default branch(-u,branch,remote can be specified)
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git log 	#show commit history
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout #by default checks out to default branch(branch/commit-id can be specified)
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone &lt;url.git&gt; #clones 'url' current location(location,depth,recursive can also be specified). 
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git status 	#shows the current status of the git repo.
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -m "msg" 	#commit changes with a commit msg.
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git revert  	#revert last commit(commit-id can be specified).
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit -m "msg" 	#commit changes with a commit msg.
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit --amend --date="Wed Feb 16 14:00 2011 +0100" #commit date+time can be changed
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git commit --signoff	#for signed commits
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git branch   #show all branches for the remote
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git checkout -b "branch-name"   #switch to new branch 
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git branch -M "branch-name"     #switch current branch to specified branch.
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone &lt;url&gt; --depth=value    #value=1 fetches the latest repo with only the latest changes or shallow clones it.
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git fetch --unshallow         #converts the shallow repo clone to full clone
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git reset --hard HEAD~1  #removes the head/top commit
</code></pre></div>    </div>
  </li>
</ul>

<h5 id="some-popular-git-hosting-services">Some popular git hosting services:</h5>

<p>There are various cloud based git clients to help save your projects in cloud. Some popular of them are:</p>

<ol>
  <li><a href="https://github.com">Github</a></li>
  <li><a href="https://gitlab.com">GitLab</a></li>
  <li><a href="https://sourceforge.net">SourceForge</a></li>
  <li><a href="https://www.gerritcodereview.com/">Gerrit</a></li>
  <li><a href="https://bitbucket.org/">Bitbucket</a></li>
  <li><a href="https://www.codebasehq.com/">Codebase</a></li>
  <li><a href="https://aws.amazon.com/codecommit/">AWS CodeCommit</a></li>
</ol>]]></content><author><name>Saroj Mahato</name><email>mail@creator54.dev</email></author><category term="git" /><category term="github" /><summary type="html"><![CDATA[Git is a free open source distributed Version Control System(VCS) originally developed by Linus Torvalds.]]></summary></entry></feed>